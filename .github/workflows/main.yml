name: Chronox CI/CD Pipeline

on:
  push:
    branches: [ main ] # trigger on push to main branch
  workflow_dispatch: # manual trigger
    inputs:
      build_image:
        description: 'Build Docker image?'
        required: true
        default: true
        type: boolean
      deployment_operation:
        description: 'Deployment Operation'
        required: true
        default: 'Reinstall'
        type: choice
        options:
        - Install
        - Uninstall
        - Reinstall

jobs:
  test:
    name: Run Tests and Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' 

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov black flake8 

    - name: Lint with Black and Flake8
      run: |
        black --check .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Pytest with Coverage
      run: |
        pytest --cov=src --junitxml=pytest-report.xml tests/
      # continue even if tests fail for display result
      continue-on-error: true

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      if: always() 
      with:
        name: pytest-results
        path: pytest-report.xml

    - name: Check Test Pass/Fail
      run: |
        if [[ $? -ne 0 ]]; then exit 1; fi


  build:
    name: Build and Push Docker Image
    needs: test # depends on the test job succeeding
    # triggered manually with build_image=true OR if triggered by push
    if: |
      needs.test.result == 'success' &&
      (github.event_name == 'push' || github.event.inputs.build_image == 'true')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/chronox:english, ${{ secrets.DOCKERHUB_USERNAME }}/chronox:${{ github.sha }}

  deploy:
    name: Deploy Application
    needs: build # depends on the build job succeeding
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest 
    environment: production 
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get Deployment Operation
      id: deploy_op
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "operation=${{ github.event.inputs.deployment_operation }}" >> $GITHUB_OUTPUT
        else
          echo "operation=Reinstall" >> $GITHUB_OUTPUT # Default for push triggers
        fi

    # kubernetes using kubectl
    - name: Set up Kubeconfig
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBECONFIG }} # store kubeconfig as a secret

    - name: Deploy to Kubernetes
      if: steps.deploy_op.outputs.operation == 'Reinstall' || steps.deploy_op.outputs.operation == 'Install'
      run: |
        echo "Applying Kubernetes manifests from chronox-deployment.yaml..."
        kubectl apply -f chronox-deployment.yaml -n student2

        echo "Setting deployment image to ${{ secrets.DOCKERHUB_USERNAME }}/chronox:${{ github.sha }}"
        kubectl set image deployment/chronox-app chronox=${{ secrets.DOCKERHUB_USERNAME }}/chronox:${{ github.sha }} -n student2

        echo "Waiting for deployment rollout to finish..."
        kubectl rollout status deployment/chronox-app -n student2 --timeout=240s

    - name: Uninstall from Kubernetes
      if: steps.deploy_op.outputs.operation == 'Uninstall' || steps.deploy_op.outputs.operation == 'Reinstall'
      run: |
        echo "Deleting Kubernetes resources from chronox-deployment.yaml..."
        kubectl delete -f chronox-deployment.yaml --ignore-not-found=true -n student2
